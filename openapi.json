{
    "openapi": "3.0.2",
    "info": {
        "title": "FastAPI",
        "description": "\nThis is the API for the AI for U project. It is a collection of endpoints that\nuse OpenAI's GPT-3 API to generate text. All requests must include a uuid header.\nThis uuid is used to check if the user is authenticated and to track usage of the API.\n",
        "version": "0.1.0"
    },
    "servers": [
        {
            "url": "/dev"
        }
    ],
    "paths": {
        "/ai-for-u/status": {
            "get": {
                "summary": "Get Status",
                "description": "Return status okay.",
                "operationId": "get_status_ai_for_u_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/text-summarizer-examples": {
            "get": {
                "summary": "Sandbox Chatgpt Examples",
                "description": "Return examples for the text summarizer endpoint.",
                "operationId": "sandbox_chatgpt_examples_ai_for_u_text_summarizer_examples_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TextSummarizerExampleResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/text-summarizer": {
            "post": {
                "summary": "Text Summarizer",
                "description": "**Summarize text using GPT-3.**",
                "operationId": "text_summarizer_ai_for_u_text_summarizer_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TextSummarizerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TextSummarizerResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokensExhaustedResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/text-revisor-examples": {
            "get": {
                "summary": "Text Revisor Examples",
                "description": "**Get examples for the {0} endpoint.**\n\nThis method returns examples for the {0} endpoint. These examples can be posted to the {0} endpoint\nwithout modification.",
                "operationId": "text_revisor_examples_ai_for_u_text_revisor_examples_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TextRevisorExamplesResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokensExhaustedResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/text-revisor": {
            "post": {
                "summary": "Text Revisor",
                "description": "**Revises text using GPT-3.**",
                "operationId": "text_revisor_ai_for_u_text_revisor_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TextRevisorRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TextRevisorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/catchy-title-creator-examples": {
            "get": {
                "summary": "Catchy Title Creator Examples",
                "description": "**Get examples for the {0} endpoint.**\n\nThis method returns a list of examples for the {0} endpoint. These examples can be posted to the {0} endpoint \nwithout modification.",
                "operationId": "catchy_title_creator_examples_ai_for_u_catchy_title_creator_examples_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatchyTitleCreatorExamplesReponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/catchy-title-creator": {
            "post": {
                "summary": "Catchy Title Creator",
                "description": "**Generate catchy titles using GPT-3.**",
                "operationId": "catchy_title_creator_ai_for_u_catchy_title_creator_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CatchyTitleCreatorRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatchyTitleCreatorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokensExhaustedResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/cover-letter-writer-examples": {
            "get": {
                "summary": "Cover Letter Writer Examples",
                "description": "**Get examples for the {0} endpoint.**\n\nThis method returns a list of examples for the {0} endpoint. These examples can be posted to the {0} endpoint \nwithout modification.",
                "operationId": "cover_letter_writer_examples_ai_for_u_cover_letter_writer_examples_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoverLetterWriterExamplesResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/cover-letter-writer": {
            "post": {
                "summary": "Cover Letter Writer",
                "description": "**Generate a cover letter for a resume and job posting.**\n\nThis method takes a resume and job posting as input and generates a cover letter for the resume and job posting.",
                "operationId": "cover_letter_writer_ai_for_u_cover_letter_writer_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CoverLetterWriterRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoverLetterWriterResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokensExhaustedResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/sandbox-chatgpt-examples": {
            "get": {
                "summary": "Sandbox Chatgpt Examples",
                "description": "Get examples for sandbox-chatgpt.\n\nReturns:\n    examples: Examples for sandbox-chatgpt.",
                "operationId": "sandbox_chatgpt_examples_ai_for_u_sandbox_chatgpt_examples_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SandBoxChatGPTExamplesResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokensExhaustedResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/sandbox-chatgpt": {
            "post": {
                "summary": "Sandbox Chatgpt",
                "description": "Get response from openAI Turbo GPT-3 model.\n\nArgs:\n    sandbox_chatgpt_request: Request containing conversation_id and prompt.\n\nReturns:\n    gpt_response: Response from openAI Turbo GPT-3 model.",
                "operationId": "sandbox_chatgpt_ai_for_u_sandbox_chatgpt_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SandBoxChatGPTRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SandBoxChatGPTResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokensExhaustedResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai-for-u/feedback": {
            "post": {
                "summary": "Feedback",
                "description": "**POST User feedback for an AI tool.**\n\nThis method is used to record user feedback for the AI tools. This method \nreturns an empty response with a 200 status code if the feedback is logged \nsuccessfully.",
                "operationId": "feedback_ai_for_u_feedback_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedbackRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AIToolsEndpointName": {
                "title": "AIToolsEndpointName",
                "enum": [
                    "text-revisor",
                    "cover-letter-writer",
                    "catchy-title-creator",
                    "text-summarizer",
                    "sandbox-chatgpt"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "CatchyTitleCreatorExamplesReponse": {
                "title": "CatchyTitleCreatorExamplesReponse",
                "required": [
                    "exampleNames",
                    "examples"
                ],
                "type": "object",
                "properties": {
                    "exampleNames": {
                        "title": "Examplenames",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "examples": {
                        "title": "Examples",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CatchyTitleCreatorRequest"
                        }
                    }
                },
                "description": "**Define examples for teh catchy-title-creator endpoint.**\n\n**Atrributes:**\n- examples: List of examples for the catchy-title-creator endpoint. Can post these examples to the catchy-title-creator endpoint without\n    modification.\n\nInherit from ExamplesResponse:\n\n**Base Response for all examples endpoints.**\n\n**Attributes:**\n- example_names: The names of the examples. This is to be used as parallel list \n    to the examples defined in child classes."
            },
            "CatchyTitleCreatorRequest": {
                "title": "CatchyTitleCreatorRequest",
                "required": [
                    "text"
                ],
                "type": "object",
                "properties": {
                    "tone": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Tone"
                            }
                        ],
                        "default": "informal"
                    },
                    "textType": {
                        "title": "Texttype",
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "default": "document"
                    },
                    "targetAudience": {
                        "title": "Targetaudience",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string",
                        "default": "public"
                    },
                    "specificKeywordsToInclude": {
                        "title": "Specifickeywordstoinclude",
                        "type": "array",
                        "items": {
                            "maxLength": 20,
                            "minLength": 1,
                            "type": "string"
                        },
                        "default": []
                    },
                    "numTitles": {
                        "title": "Numtitles",
                        "maximum": 10.0,
                        "minimum": 1.0,
                        "type": "integer",
                        "default": 3
                    },
                    "creativity": {
                        "title": "Creativity",
                        "maximum": 100.0,
                        "minimum": 0.0,
                        "type": "integer",
                        "default": 50
                    },
                    "text": {
                        "title": "Text",
                        "maxLength": 10000,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "description": "**Define the model for the request body for catchy-title-creator endpoint.**\n\n**Atrributes:**\n- text: The text to generate a catchy title for.\n\n**AI Instructions:**\n\n\n**Base for all AI Instructions.**\n\n- tone: The tone of the AI. This is used to determine the tone of the AI's instructions. Each\n    class that inherits from this class should define the default tone for the AI and \n    provide instructions on what the tone should impact in the the response."
            },
            "CatchyTitleCreatorResponse": {
                "title": "CatchyTitleCreatorResponse",
                "type": "object",
                "properties": {
                    "titles": {
                        "title": "Titles",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": []
                    }
                },
                "description": "**Define the model for the response body for catchy-title-creator endpoint.**\n\n**Atrributes:**\n- titles: The list of titles generated for the text. They are not in any particular order."
            },
            "CoverLetterWriterExamplesResponse": {
                "title": "CoverLetterWriterExamplesResponse",
                "required": [
                    "exampleNames",
                    "examples"
                ],
                "type": "object",
                "properties": {
                    "exampleNames": {
                        "title": "Examplenames",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "examples": {
                        "title": "Examples",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CoverLetterWriterRequest"
                        }
                    }
                },
                "description": "**Define the model for the response body for cover-letter-writer examples endpoint.**\n\nInherits from ExamplesResponse:\n\n**Base Response for all examples endpoints.**\n\n**Attributes:**\n- example_names: The names of the examples. This is to be used as parallel list \n    to the examples defined in child classes."
            },
            "CoverLetterWriterRequest": {
                "title": "CoverLetterWriterRequest",
                "required": [
                    "jobPosting",
                    "resume"
                ],
                "type": "object",
                "properties": {
                    "tone": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Tone"
                            }
                        ],
                        "default": "assertive"
                    },
                    "jobPosting": {
                        "title": "Jobposting",
                        "maxLength": 10000,
                        "minLength": 1,
                        "type": "string"
                    },
                    "companyName": {
                        "title": "Companyname",
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string"
                    },
                    "skillsToHighlightFromResume": {
                        "title": "Skillstohighlightfromresume",
                        "maxLength": 1000,
                        "minLength": 1,
                        "type": "string"
                    },
                    "resume": {
                        "title": "Resume",
                        "maxLength": 10000,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "description": "**Define the model for the request body for cover-letter-writer endpoint.**\n\n**Atrributes:**\n- resume: The resume to generate a cover letter for.\n- job_posting: The job posting to generate a cover letter for.\n- skills_to_highlight_from_resume: The skills to highlight from the resume.\n\n**AI Instructions:**\n\nYou are an expert cover letter writer. I will provide a resume, job posting, and company name (if given) to write a cover letter for.\n\nI will also provide a list of skills to highlight from the resume. You should respond with a cover letter that is tailored to the job posting and company, highlights the user's skills, and demonstrates enthusiasm for the company and role.\n\n**Instructions that I may provide you:**\n* tone: The tone that you should use when writing the cover letter. Here are the possible tones: ['formal', 'informal', 'optimistic', 'worried', 'friendly', 'curious', 'assertive', 'encouraging', 'surprised', 'cooperative'].\n* skills_to_highlight_from_resume: The skills to highlight from the resume. If this is not provided, you should highlight the skills that you think are most relevant to the job posting."
            },
            "CoverLetterWriterResponse": {
                "title": "CoverLetterWriterResponse",
                "required": [
                    "coverLetter"
                ],
                "type": "object",
                "properties": {
                    "coverLetter": {
                        "title": "Coverletter",
                        "type": "string"
                    }
                },
                "description": "**Define the model for the response body for cover-letter-writer endpoint.**\n\n**Atrributes:**\n- cover_letter: The cover letter generated for the resume and job posting."
            },
            "FeedbackRequest": {
                "title": "FeedbackRequest",
                "required": [
                    "aiToolEndpointName",
                    "userPromptFeedbackContext",
                    "aiResponseFeedbackContext",
                    "rating"
                ],
                "type": "object",
                "properties": {
                    "aiToolEndpointName": {
                        "$ref": "#/components/schemas/AIToolsEndpointName"
                    },
                    "userPromptFeedbackContext": {
                        "title": "Userpromptfeedbackcontext",
                        "type": "object"
                    },
                    "aiResponseFeedbackContext": {
                        "title": "Airesponsefeedbackcontext",
                        "type": "object"
                    },
                    "rating": {
                        "$ref": "#/components/schemas/Rating"
                    },
                    "writtenFeedback": {
                        "title": "Writtenfeedback",
                        "maxLength": 500,
                        "minLength": 0,
                        "type": "string",
                        "default": ""
                    }
                },
                "description": "**Define the model for the request body for the feedback endpoint.**\n\n**Atrributes:**\n- user_prompt_feedback_context: The context of the user prompt that the feedback is for.\n    Any of the AI tool request models can be used here. (templates or sandbox)\n- ai_response_feedback_context: The context of the AI response that the feedback is for.\n    Any of the AI tool response models can be used here. (templates or sandbox)\n- star_rating: The star rating left by the user.\n- written_feedback: Any written feedback left by the user.",
                "example": {
                    "aiToolEndpointName": "templates",
                    "userPromptFeedbackContext": {
                        "conversationUuid": "f4bd346a-9ade-4471-b127-1f73364df090",
                        "userMessage": "Make me Famous"
                    },
                    "aiResponseFeedbackContext": {
                        "gptResponse": "Famous"
                    },
                    "rating": 5,
                    "writtenFeedback": "This was a great response"
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "Rating": {
                "title": "Rating",
                "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "type": "string",
                "description": "Define the possible rating values."
            },
            "RevisionType": {
                "title": "RevisionType",
                "enum": [
                    "spelling",
                    "grammar",
                    "sentence structure",
                    "word choice",
                    "consistency",
                    "punctuation"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "SandBoxChatGPTExamplesResponse": {
                "title": "SandBoxChatGPTExamplesResponse",
                "required": [
                    "exampleNames",
                    "examples"
                ],
                "type": "object",
                "properties": {
                    "exampleNames": {
                        "title": "Examplenames",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "examples": {
                        "title": "Examples",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "**Define example starter prompts for sandbox-chatgpt endpoint.**\n\n**Example:**\n* example_names: [\"How to Cook Ramen\"] \n\n\n* examples: [\"I want to cook ramen. What ingredients do I need?\"]\n\n**Attributes:**\n**example_names:** List of example names. \n\n\n**examples:** List of corresponding example prompts."
            },
            "SandBoxChatGPTRequest": {
                "title": "SandBoxChatGPTRequest",
                "required": [
                    "conversationUuid"
                ],
                "type": "object",
                "properties": {
                    "conversationUuid": {
                        "title": "Conversationuuid",
                        "type": "string",
                        "format": "uuid"
                    },
                    "userMessage": {
                        "title": "Usermessage",
                        "type": "string",
                        "default": ""
                    }
                },
                "description": "## Define the request body for sandbox-chatgpt endpoint.\n\nWhen a conversation is started, the client should send a request with a conversation_id and an empty prompt.\nThe response will contain the initial prompt from the model. The client should then send a request with the \nconversation_id for each subsequent prompt. The prompt should only include the user's response to the model's \nprompt.\n\n### Example Conversation:\n* Request 1: {\"conversation_id\": \"id\", \"prompt\": \"\"}\n\n\n* Response 1: {\"gpt_response\": \"Hi, how are you?\"}\n\n\n* Request 2: {\"conversation_id\": \"id\", \"prompt\": \"I'm good, how are you?\"}\n\n\n* Response 2: {\"gpt_response\": \"I'm good, thanks for asking.\"}\n\n\n\n### Attributes:\n    conversation_uuid: A unique identifier for the conversation (generated by the client)\n    user_message: The prompt to send to the model. The prompt should only include the user's response to the model's prompt."
            },
            "SandBoxChatGPTResponse": {
                "title": "SandBoxChatGPTResponse",
                "required": [
                    "gptResponse"
                ],
                "type": "object",
                "properties": {
                    "gptResponse": {
                        "title": "Gptresponse",
                        "type": "string"
                    }
                }
            },
            "TextRevisorExamplesResponse": {
                "title": "TextRevisorExamplesResponse",
                "required": [
                    "exampleNames",
                    "examples"
                ],
                "type": "object",
                "properties": {
                    "exampleNames": {
                        "title": "Examplenames",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "examples": {
                        "title": "Examples",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TextRevisorRequest"
                        }
                    }
                },
                "description": "**Define examples for the text-revisor endpoint.**\n\n**Attributes:**\n- examples: A list of TextRevisorRequest objects. Can post these examples to the text-revisor endpoint without\n    modification.\n\nInherit from ExamplesResponse:\n\n**Base Response for all examples endpoints.**\n\n**Attributes:**\n- example_names: The names of the examples. This is to be used as parallel list \n    to the examples defined in child classes."
            },
            "TextRevisorRequest": {
                "title": "TextRevisorRequest",
                "required": [
                    "textToRevise"
                ],
                "type": "object",
                "properties": {
                    "tone": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Tone"
                            }
                        ],
                        "default": "assertive"
                    },
                    "revisionTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RevisionType"
                        },
                        "default": [
                            "spelling",
                            "grammar",
                            "sentence structure",
                            "word choice",
                            "consistency",
                            "punctuation"
                        ]
                    },
                    "creativity": {
                        "title": "Creativity",
                        "maximum": 100.0,
                        "minimum": 0.0,
                        "type": "integer",
                        "default": 50
                    },
                    "textToRevise": {
                        "title": "Texttorevise",
                        "maxLength": 114,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "description": "**Define the model for the request body for text-revisor endpoint.**\n\n**Attributes:**\n* text_to_revise: The text to revise. This can literally be any block of text.\n\n**AI Instructions:**\n\nYou are an expert text revisor. I will provide a text to revise and should respond with a revised version of that text, nothing else.\n\nFor each revision, only respond with the revision, nothing else (no explanations, not the original text, no comparisons between the original and the revised, etc.).\n\n**Instructions that I may provide you:**\n* revision_types: The types of revisions that you should make to the text. The types of revisions that can be made are: ['spelling', 'grammar', 'sentence structure', 'word choice', 'consistency', 'punctuation']. Do not revise the text in anyway that is not in this list. Use this list as a guide to what types of revisions you should make.\n* creativity: The creativity of the revised text. Where 0 is the least creative and 100 is the most creative. Further, a creativity closer to 0 signifies that the revisions should be made in a way that is as close to the original text as possible  while a creativity closer to 100 signifies that you have more freedom to embellish the text.\n* tone: The tone that you should use when revising the text. Here are the possible tones: ['formal', 'informal', 'optimistic', 'worried', 'friendly', 'curious', 'assertive', 'encouraging', 'surprised', 'cooperative']."
            },
            "TextRevisorResponse": {
                "title": "TextRevisorResponse",
                "type": "object",
                "properties": {
                    "revisedTextList": {
                        "title": "Revisedtextlist",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": []
                    }
                },
                "description": "**Define the model for the response body for the text-revisor endpoint.**"
            },
            "TextSummarizerExampleResponse": {
                "title": "TextSummarizerExampleResponse",
                "required": [
                    "exampleNames",
                    "examples"
                ],
                "type": "object",
                "properties": {
                    "exampleNames": {
                        "title": "Examplenames",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "examples": {
                        "title": "Examples",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TextSummarizerRequest"
                        }
                    }
                },
                "description": "**Base Response for all examples endpoints.**\n\n**Attributes:**\n- example_names: The names of the examples. This is to be used as parallel list \n    to the examples defined in child classes."
            },
            "TextSummarizerRequest": {
                "title": "TextSummarizerRequest",
                "required": [
                    "textToSummarize"
                ],
                "type": "object",
                "properties": {
                    "tone": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Tone"
                            }
                        ],
                        "default": "formal"
                    },
                    "textToSummarize": {
                        "title": "Texttosummarize",
                        "type": "string"
                    },
                    "includeSummarySentence": {
                        "title": "Includesummarysentence",
                        "type": "boolean",
                        "default": true
                    },
                    "numberOfBullets": {
                        "title": "Numberofbullets",
                        "type": "integer"
                    },
                    "numberOfActionItems": {
                        "title": "Numberofactionitems",
                        "type": "integer"
                    }
                },
                "description": "**Define the request model for the text summarizer endpoint.**\n\n**Attributes:**\n- text_to_summarize: text for the endpoint to summarize\n- include_summary_sentence: whether or not to include a summary sentence in the response\n- number_of_bullets: number of bullet points to include in the response\n- number_of_action_items: number of action items to include in the response (this is suggested to use with \n    summaries of things such as meeting minutes)\n\nInherit from BaseAIInstructionModel:    \n\n**Base for all AI Instructions.**\n\n- tone: The tone of the AI. This is used to determine the tone of the AI's instructions. Each\n    class that inherits from this class should define the default tone for the AI and \n    provide instructions on what the tone should impact in the the response."
            },
            "TextSummarizerResponse": {
                "title": "TextSummarizerResponse",
                "required": [
                    "summary"
                ],
                "type": "object",
                "properties": {
                    "summary": {
                        "title": "Summary",
                        "type": "string"
                    }
                }
            },
            "TokensExhaustedResponse": {
                "title": "TokensExhaustedResponse",
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "default": "Tokens exhausted for the day. Please Sign Up for a free account to continue using AIforU or wait until tomorrow to use the AIforU again."
                    }
                },
                "description": "Define the model for the client error response."
            },
            "Tone": {
                "title": "Tone",
                "enum": [
                    "formal",
                    "informal",
                    "optimistic",
                    "worried",
                    "friendly",
                    "curious",
                    "assertive",
                    "encouraging",
                    "surprised",
                    "cooperative"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            }
        }
    }
}